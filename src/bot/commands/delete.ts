import { Context } from 'telegraf';
import { prisma } from '../../utils/prisma';
import { logger } from '../../utils/logger';

export async function deleteMedication(ctx: Context) {
  const telegramId = ctx.from?.id.toString();

  if (!telegramId) {
    logger.error({ chatId: ctx.chat?.id }, 'No user ID in delete command');
    return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        medications: {
          where: { isActive: true },
        },
      },
    });

    if (!user) {
      return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    if (user.medications.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }

    const keyboard = user.medications.map((med) => [
      {
        text: `‚ùå ${med.name}`,
        callback_data: `delete_med:${med.id}`,
      },
    ]);

    keyboard.push([{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_delete' }]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  } catch (error) {
    logger.error({ error, userId: telegramId }, 'Error in delete command');
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

export async function handleDeleteCallback(ctx: Context, medicationId: number) {
  const telegramId = ctx.from?.id.toString();

  if (!telegramId) {
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await prisma.medication.update({
      where: { id: medicationId, userId: user.id },
      data: {
        isActive: false,
        schedules: {
          updateMany: {
            where: { medicationId },
            data: { isActive: false },
          },
        },
      },
    });

    await ctx.editMessageText('‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.');
    await ctx.answerCbQuery('–£–¥–∞–ª–µ–Ω–æ');

    logger.info({ userId: telegramId, medicationId }, 'Medication deleted');
  } catch (error) {
    logger.error({ error, medicationId }, 'Error deleting medication');
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
}
