import { Context } from 'telegraf';
import { prisma } from '../../utils/prisma';
import { logger } from '../../utils/logger';
import { format } from 'date-fns';

export async function list(ctx: Context) {
  const telegramId = ctx.from?.id.toString();

  if (!telegramId) {
    logger.error({ chatId: ctx.chat?.id }, 'No user ID in list command');
    return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        medications: {
          where: { isActive: true },
          include: {
            schedules: {
              where: { isActive: true },
            },
          },
        },
      },
    });

    if (!user) {
      return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    if (user.medications.length === 0) {
      return ctx.reply(
        'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n' + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.'
      );
    }

    let message = 'üíä <b>–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:</b>\n\n';

    user.medications.forEach((med, index) => {
      message += `<b>${index + 1}. ${med.name}</b>\n`;
      if (med.description) {
        message += `   ${med.description}\n`;
      }
      message += `   üìÖ –ù–∞—á–∞–ª–æ: ${format(med.startDate, 'dd.MM.yyyy')}\n`;
      if (med.endDate) {
        message += `   üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${format(med.endDate, 'dd.MM.yyyy')}\n`;
      }
      message += `   üìÜ –ß–∞—Å—Ç–æ—Ç–∞: ${getFrequencyText(med.frequency)}\n`;

      if (med.schedules.length > 0) {
        message += `   ‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞:\n`;
        med.schedules.forEach((schedule) => {
          message += `      ‚Ä¢ ${schedule.time} - ${schedule.dosage}`;
          if (schedule.notes) {
            message += ` (${schedule.notes})`;
          }
          message += '\n';
        });
      }
      message += '\n';
    });

    message += '\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</i>';

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error({ error, userId: telegramId }, 'Error in list command');
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤.');
  }
}

function getFrequencyText(frequency: string): string {
  switch (frequency) {
    case 'DAILY':
      return '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å';
    case 'WEEKLY':
      return '–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏';
    case 'INTERVAL':
      return '–ß–µ—Ä–µ–∑ N –¥–Ω–µ–π';
    default:
      return frequency;
  }
}
