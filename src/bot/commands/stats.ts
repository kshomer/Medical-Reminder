import { Context } from 'telegraf';
import { prisma } from '../../utils/prisma';
import { logger } from '../../utils/logger';
import { startOfMonth, endOfMonth, startOfWeek, endOfWeek, format } from 'date-fns';

export async function stats(ctx: Context) {
  const telegramId = ctx.from?.id.toString();

  if (!telegramId) {
    logger.error({ chatId: ctx.chat?.id }, 'No user ID in stats command');
    return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }

    const now = new Date();
    const weekStart = startOfWeek(now, { weekStartsOn: 1 });
    const weekEnd = endOfWeek(now, { weekStartsOn: 1 });
    const monthStart = startOfMonth(now);
    const monthEnd = endOfMonth(now);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    const weekLogs = await prisma.intakeLog.findMany({
      where: {
        userId: user.id,
        scheduledDate: {
          gte: weekStart,
          lte: weekEnd,
        },
      },
    });

    const weekConfirmed = weekLogs.filter((log) => log.status === 'CONFIRMED').length;
    const weekTotal = weekLogs.length;
    const weekPercentage = weekTotal > 0 ? Math.round((weekConfirmed / weekTotal) * 100) : 0;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    const monthLogs = await prisma.intakeLog.findMany({
      where: {
        userId: user.id,
        scheduledDate: {
          gte: monthStart,
          lte: monthEnd,
        },
      },
    });

    const monthConfirmed = monthLogs.filter((log) => log.status === 'CONFIRMED').length;
    const monthTotal = monthLogs.length;
    const monthPercentage = monthTotal > 0 ? Math.round((monthConfirmed / monthTotal) * 100) : 0;

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalLogs = await prisma.intakeLog.count({
      where: {
        userId: user.id,
      },
    });

    const totalConfirmed = await prisma.intakeLog.count({
      where: {
        userId: user.id,
        status: 'CONFIRMED',
      },
    });

    const totalPercentage =
      totalLogs > 0 ? Math.round((totalConfirmed / totalLogs) * 100) : 0;

    const message =
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤</b>\n\n` +
      `üìÖ <b>–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</b> (${format(weekStart, 'dd.MM')} - ${format(weekEnd, 'dd.MM')})\n` +
      `   –ü—Ä–∏–Ω—è—Ç–æ: ${weekConfirmed} –∏–∑ ${weekTotal}\n` +
      `   –°–æ–±–ª—é–¥–µ–Ω–∏–µ: ${weekPercentage}%\n` +
      `   ${getProgressBar(weekPercentage)}\n\n` +
      `üìÜ <b>–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü</b> (${format(monthStart, 'MMMM yyyy')})\n` +
      `   –ü—Ä–∏–Ω—è—Ç–æ: ${monthConfirmed} –∏–∑ ${monthTotal}\n` +
      `   –°–æ–±–ª—é–¥–µ–Ω–∏–µ: ${monthPercentage}%\n` +
      `   ${getProgressBar(monthPercentage)}\n\n` +
      `üìà <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è</b>\n` +
      `   –ü—Ä–∏–Ω—è—Ç–æ: ${totalConfirmed} –∏–∑ ${totalLogs}\n` +
      `   –°–æ–±–ª—é–¥–µ–Ω–∏–µ: ${totalPercentage}%\n` +
      `   ${getProgressBar(totalPercentage)}`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error({ error, userId: telegramId }, 'Error in stats command');
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

function getProgressBar(percentage: number): string {
  const filled = Math.round(percentage / 10);
  const empty = 10 - filled;
  return '‚ñ∞'.repeat(filled) + '‚ñ±'.repeat(empty) + ` ${percentage}%`;
}
