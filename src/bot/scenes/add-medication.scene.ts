import { Scenes } from 'telegraf';
import { MedicationService } from '../../services/medication.service';
import { logger } from '../../utils/logger';
import { BotContext } from '../types';

const addMedicationScene = new Scenes.WizardScene<BotContext>(
  'add-medication',
  async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:');
    ctx.scene.session.medication = {};
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      ctx.scene.session.medication!.name = ctx.message.text;
      await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip):');
      return ctx.wizard.next();
    }
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
  },
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      if (ctx.message.text !== '/skip') {
        ctx.scene.session.medication!.description = ctx.message.text;
      }
      await ctx.reply('–ö–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'start_today' }],
            [{ text: '–ó–∞–≤—Ç—Ä–∞', callback_data: 'start_tomorrow' }]
          ]
        }
      });
      return ctx.wizard.next();
    }
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ /skip.');
  },
  async (ctx) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      const today = new Date();
      ctx.scene.session.medication!.startDate = ctx.callbackQuery.data === 'start_today' ? today : new Date(today.setDate(today.getDate() + 1));
      await ctx.reply('–ö–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ë–µ—Å—Å—Ä–æ—á–Ω–æ', callback_data: 'duration_endless' }],
            [{ text: '7 –¥–Ω–µ–π', callback_data: 'duration_7days' }],
            [{ text: '30 –¥–Ω–µ–π', callback_data: 'duration_30days' }]
          ]
        }
      });
      await ctx.answerCbQuery();
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      const today = new Date();
      if (ctx.callbackQuery.data === 'duration_endless') {
        ctx.scene.session.medication!.endDate = null;
      } else if (ctx.callbackQuery.data === 'duration_7days') {
        ctx.scene.session.medication!.endDate = new Date(today.setDate(today.getDate() + 7));
      } else {
        ctx.scene.session.medication!.endDate = new Date(today.setDate(today.getDate() + 30));
      }
      await ctx.reply('–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data: 'freq_daily' }]
          ]
        }
      });
      await ctx.answerCbQuery();
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      ctx.scene.session.medication!.frequency = 'DAILY';
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00):');
      await ctx.answerCbQuery();
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;
      if (timeRegex.test(ctx.message.text)) {
        ctx.scene.session.medication!.time = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É:');
        return ctx.wizard.next();
      }
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (09:00).');
    }
  },
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      ctx.scene.session.medication!.dosage = ctx.message.text;
      await ctx.reply('–ï—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏—ë–º–∞?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–æ –µ–¥—ã', callback_data: 'notes_before' }],
            [{ text: '–ü–æ—Å–ª–µ –µ–¥—ã', callback_data: 'notes_after' }],
            [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'notes_none' }]
          ]
        }
      });
      return ctx.wizard.next();
    }
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
  },
  async (ctx) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      if (ctx.callbackQuery.data !== 'notes_none') {
        ctx.scene.session.medication!.notes = ctx.callbackQuery.data === 'notes_before' ? '–î–æ –µ–¥—ã' : '–ü–æ—Å–ª–µ –µ–¥—ã';
      }
      const { name, description, startDate, endDate, frequency, time, dosage, notes } = ctx.scene.session.medication!;
      await ctx.reply(
        `üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
        `üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: ${name}\n` +
        (description ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` : '') +
        `üìÖ –ù–∞—á–∞–ª–æ: ${startDate?.toLocaleDateString('ru-RU')}\n` +
        `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${endDate ? endDate.toLocaleDateString('ru-RU') : '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n` +
        `üìÜ –ß–∞—Å—Ç–æ—Ç–∞: ${frequency === 'DAILY' ? '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å' : frequency}\n` +
        `üïê –í—Ä–µ–º—è: ${time}\n` +
        `üíâ –î–æ–∑–∏—Ä–æ–≤–∫–∞: ${dosage}\n` +
        (notes ? `‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${notes}\n` : '') +
        `\n–í—Å—ë –≤–µ—Ä–Ω–æ?`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'confirm_save' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'confirm_cancel' }]
            ]
          }
        }
      );
      await ctx.answerCbQuery();
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      if (ctx.callbackQuery.data === 'confirm_cancel') {
        await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        await ctx.answerCbQuery();
        return ctx.scene.leave();
      }
      
      const medicationService = new MedicationService();
      const telegramId = ctx.from?.id.toString();
      
      if (!telegramId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return ctx.scene.leave();
      }
      
      try {
        await medicationService.createMedication({
          telegramId,
          name: ctx.scene.session.medication!.name!,
          description: ctx.scene.session.medication!.description,
          startDate: ctx.scene.session.medication!.startDate!,
          endDate: ctx.scene.session.medication!.endDate,
          frequency: ctx.scene.session.medication!.frequency!,
          schedules: [{ time: ctx.scene.session.medication!.time!, dosage: ctx.scene.session.medication!.dosage!, notes: ctx.scene.session.medication!.notes }]
        });
        
        await ctx.reply('‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
        await ctx.answerCbQuery();
      } catch (err) {
        logger.error({ err, userId: ctx.from?.id }, 'Failed to save medication');
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      return ctx.scene.leave();
    }
  }
);

addMedicationScene.command('cancel', async (ctx) => {
  await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  return ctx.scene.leave();
});

export { addMedicationScene };