import { InlineKeyboardButton } from 'telegraf/types';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, getDay } from 'date-fns';
import { ru } from 'date-fns/locale';

export function generateCalendar(date: Date, prefix: string): InlineKeyboardButton[][] {
  const monthStart = startOfMonth(date);
  const monthEnd = endOfMonth(date);
  const days = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const keyboard: InlineKeyboardButton[][] = [];

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
  keyboard.push([
    {
      text: '‚óÄÔ∏è',
      callback_data: `${prefix}_prev_month:${format(date, 'yyyy-MM-dd')}`,
    },
    {
      text: format(date, 'LLLL yyyy', { locale: ru }),
      callback_data: 'ignore',
    },
    {
      text: '‚ñ∂Ô∏è',
      callback_data: `${prefix}_next_month:${format(date, 'yyyy-MM-dd')}`,
    },
  ]);

  // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
  keyboard.push([
    { text: '–ü–Ω', callback_data: 'ignore' },
    { text: '–í—Ç', callback_data: 'ignore' },
    { text: '–°—Ä', callback_data: 'ignore' },
    { text: '–ß—Ç', callback_data: 'ignore' },
    { text: '–ü—Ç', callback_data: 'ignore' },
    { text: '–°–±', callback_data: 'ignore' },
    { text: '–í—Å', callback_data: 'ignore' },
  ]);

  // –î–Ω–∏ –º–µ—Å—è—Ü–∞
  let week: InlineKeyboardButton[] = [];
  const firstDayOfWeek = getDay(monthStart);
  const offset = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;

  // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
  for (let i = 0; i < offset; i++) {
    week.push({ text: ' ', callback_data: 'ignore' });
  }

  days.forEach((day) => {
    const dayOfWeek = getDay(day);
    
    week.push({
      text: format(day, 'd'),
      callback_data: `${prefix}_select_date:${format(day, 'yyyy-MM-dd')}`,
    });

    // –ï—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if (dayOfWeek === 0 || day.getTime() === monthEnd.getTime()) {
      // –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–µ–ª—é –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
      while (week.length < 7) {
        week.push({ text: ' ', callback_data: 'ignore' });
      }
      keyboard.push(week);
      week = [];
    }
  });

  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
  keyboard.push([{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: `${prefix}_cancel` }]);

  return keyboard;
}

export function generateWeekDaysKeyboard(
  selectedDays: string[] = [],
  prefix: string
): InlineKeyboardButton[][] {
  const weekDays = [
    { short: '–ü–Ω', full: 'Monday' },
    { short: '–í—Ç', full: 'Tuesday' },
    { short: '–°—Ä', full: 'Wednesday' },
    { short: '–ß—Ç', full: 'Thursday' },
    { short: '–ü—Ç', full: 'Friday' },
    { short: '–°–±', full: 'Saturday' },
    { short: '–í—Å', full: 'Sunday' },
  ];

  const keyboard: InlineKeyboardButton[][] = [];

  // –ü–æ 2 –¥–Ω—è –≤ —Ä—è–¥
  for (let i = 0; i < weekDays.length; i += 2) {
    const row: InlineKeyboardButton[] = [];
    
    for (let j = 0; j < 2 && i + j < weekDays.length; j++) {
      const day = weekDays[i + j];
      const isSelected = selectedDays.includes(day.full);
      
      row.push({
        text: isSelected ? `‚úÖ ${day.short}` : day.short,
        callback_data: `${prefix}_toggle_day:${day.full}`,
      });
    }
    
    keyboard.push(row);
  }

  // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  keyboard.push([
    { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `${prefix}_confirm_days` },
    { text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: `${prefix}_cancel` },
  ]);

  return keyboard;
}
